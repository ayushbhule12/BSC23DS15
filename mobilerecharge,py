import streamlit as st
import pandas as pd
from datetime import datetime
import os

# CSV file to store data
FILE_PATH = 'recharge_ledger.csv'

# Initialize ledger CSV file if it doesn't exist
def init_ledger():
    if not os.path.exists(FILE_PATH):
        df = pd.DataFrame(columns=['UserID', 'MobileNumber', 'RechargeAmount', 'Date'])
        df.to_csv(FILE_PATH, index=False)

# Load data from the CSV
def load_data():
    return pd.read_csv(FILE_PATH)

# Save a new record
def save_record(user_id, mobile_number, amount):
    new_record = pd.DataFrame({
        'UserID': [user_id],
        'MobileNumber': [mobile_number],
        'RechargeAmount': [amount],
        'Date': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')]
    })
    df = pd.read_csv(FILE_PATH)
    df = pd.concat([df, new_record], ignore_index=True)
    df.to_csv(FILE_PATH, index=False)

# Filter records by user ID
def filter_by_user_id(user_id):
    df = pd.read_csv(FILE_PATH)
    return df[df['UserID'] == user_id]

# Main Streamlit App
def main():
    st.title("ðŸ“± Mobile Recharge Records Ledger")

    menu = ["Add Recharge", "View All Records", "Search by User ID"]
    choice = st.sidebar.selectbox("Menu", menu)

    init_ledger()

    if choice == "Add Recharge":
        st.subheader("Add New Recharge Record")
        user_id = st.text_input("Enter User ID")
        mobile_number = st.text_input("Enter Mobile Number")
        amount = st.number_input("Recharge Amount", min_value=0.0, step=1.0)

        if st.button("Add Record"):
            if user_id and mobile_number and amount > 0:
                save_record(user_id, mobile_number, amount)
                st.success("Recharge record added successfully!")
            else:
                st.warning("Please fill all fields correctly.")

    elif choice == "View All Records":
        st.subheader("All Recharge Records")
        data = load_data()
        st.dataframe(data)

    elif choice == "Search by User ID":
        st.subheader("Search Records")
        search_id = st.text_input("Enter User ID to search")
        if st.button("Search"):
            result = filter_by_user_id(search_id)
            if not result.empty:
                st.dataframe(result)
            else:
                st.warning("No records found for this User ID.")

import streamlit as st
import pandas as pd
from datetime import datetime
import os

# CSV file to store data
FILE_PATH = 'recharge_ledger.csv'

# Initialize ledger CSV file if it doesn't exist
def init_ledger():
    if not os.path.exists(FILE_PATH):
        df = pd.DataFrame(columns=['UserID', 'MobileNumber', 'RechargeAmount', 'Date'])
        df.to_csv(FILE_PATH, index=False)

# Load data from the CSV
def load_data():
    return pd.read_csv(FILE_PATH)

# Save a new record
def save_record(user_id, mobile_number, amount):
    new_record = pd.DataFrame({
        'UserID': [user_id],
        'MobileNumber': [mobile_number],
        'RechargeAmount': [amount],
        'Date': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')]
    })
    df = pd.read_csv(FILE_PATH)
    df = pd.concat([df, new_record], ignore_index=True)
    df.to_csv(FILE_PATH, index=False)

# Filter records by user ID
def filter_by_user_id(user_id):
    df = pd.read_csv(FILE_PATH)
    return df[df['UserID'] == user_id]

# Main Streamlit App
def main():
    st.title("ðŸ“± Mobile Recharge Records Ledger")

    menu = ["Add Recharge", "View All Records", "Search by User ID"]
    choice = st.sidebar.selectbox("Menu", menu)

    init_ledger()

    if choice == "Add Recharge":
        st.subheader("Add New Recharge Record")
        user_id = st.text_input("Enter User ID")
        mobile_number = st.text_input("Enter Mobile Number")
        amount = st.number_input("Recharge Amount", min_value=0.0, step=1.0)

        if st.button("Add Record"):
            if user_id and mobile_number and amount > 0:
                save_record(user_id, mobile_number, amount)
                st.success("Recharge record added successfully!")
            else:
                st.warning("Please fill all fields correctly.")

    elif choice == "View All Records":
        st.subheader("All Recharge Records")
        data = load_data()
        st.dataframe(data)

    elif choice == "Search by User ID":
        st.subheader("Search Records")
        search_id = st.text_input("Enter User ID to search")
        if st.button("Search"):
            result = filter_by_user_id(search_id)
            if not result.empty:
                st.dataframe(result)
            else:
                st.warning("No records found for this User ID.")

if __name__ == '__main__':
    main()
